name: Documentation Reminder
on:
  # This line enables manual triggering of this workflow.
  workflow_dispatch:
  workflow_call:
    inputs:
      pr:
        description: "This is the PR number in case the workflow is being called in a pull request"
        required: false
        type: number

  pull_request:
    branches: [release]
    types:
      - opened
      - synchronize
      - reopened
      - labeled
      - unlabeled

jobs:
  documentation_reminder:
    runs-on: ubuntu-latest

    steps:
      - name: Check for Skip Documentation label
        id: check_skip_documentation
        uses: docker://agilepathway/pull-request-label-checker:latest
        with:
          # Needs to have a skip documentation label to avoid commenting for the documentation reminder
          none_of: skip-documentation
          repo_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout the merged commit from PR and base branch
        if: inputs.pr != 0 && steps.check_skip_documentation.outputs.label_check == 'success'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: refs/pull/${{ inputs.pr }}/merge

      # Checkout the code in the current branch in case the workflow is called because of a branch push event
      - name: Checkout the head commit of the branch
        if: inputs.pr == 0 && steps.check_skip_documentation.outputs.label_check == 'success'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # get all the files changes in the app folder
      - name: Get changed files in the app folder
        id: changed_files
        if: steps.check_skip_documentation.outputs.label_check == 'success'
        uses: umani/changed-files@v4.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          pattern: "app/.*"

      - name: Check PR for documentation files and get contents for all
        id: get_documentation_files_content
        if: steps.check_skip_documentation.outputs.label_check == 'success'
        run: |
          documentation_file_name="documentation.md"
          documentation_contents=()

          for file in ${{ steps.changed_files.outputs.files_updated }} ${{ steps.changed_files.outputs.files_deleted }} ${{steps.changed_files.outputs.files_created}}; do
            last_directory=$(dirname "$file")
            
            # Check if the directory has been searched already
            if [[ -n "$SEARCHED_DIRECTORIES" && "$SEARCHED_DIRECTORIES" == *"$last_directory"* ]]; then
              continue
            fi

            # Add the last_directory to the search directories variable
            SEARCHED_DIRECTORIES="$SEARCHED_DIRECTORIES:$last_directory"
            if [[ -f "$last_directory/$documentation_file_name" ]]; then
              file_name="$last_directory/$documentation_file_name"
              documentation_contents+=("$(cat "$file_name")\n\n\n")
            fi
          done

          echo ${documentation_contents}

          echo "::set-output name=documentation_contents::${documentation_contents[@]}"

      # This step creates a comment on the PR for the documentation reminder.
      - name: Comment on PR if documentation files found
        if: steps.check_skip_documentation.outputs.label_check == 'success' && steps.get_documentation_files_content.outputs.documentation_contents
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            :warning: ***Documentation Reminder***
            It seems that changes have been made in the implementation.

            ------

            ${{steps.get_documentation_files_content.outputs.documentation_contents}}

            ------

            Please ensure that the corresponding documentation is updated.
