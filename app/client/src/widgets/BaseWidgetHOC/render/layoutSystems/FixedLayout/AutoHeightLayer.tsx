import AutoHeightContainerWrapper from "components/autoHeight/AutoHeightContainerWrapper";
import { EditorContext } from "components/editorComponents/EditorContextProvider";
import { GridDefaults, WIDGET_PADDING } from "constants/WidgetConstants";
import React, { useContext } from "react";
import type { BaseWidgetProps } from "widgets/BaseWidgetHOC/withBaseWidgetHOC";
import {
  isAutoHeightEnabledForWidget,
  shouldUpdateWidgetHeightAutomatically,
} from "widgets/WidgetUtils";

export const AutoHeightLayer = (props: BaseWidgetProps) => {
  // This `if` code is responsible for the unmount of the widgets
  // while toggling the dynamicHeight property
  // Adding a check for the Modal Widget early
  // to avoid deselect Modal in its unmount effect.
  const context = useContext(EditorContext);
  if (
    isAutoHeightEnabledForWidget(props) &&
    props.isAutoGeneratedWidget && // To skip list widget's auto generated widgets
    props.detachFromLayout // To skip Modal widget issue #18697
  ) {
    const updateAutoHeight = (height: number): void => {
      const paddedHeight =
        Math.ceil(
          Math.ceil(height + WIDGET_PADDING * 2) /
            GridDefaults.DEFAULT_GRID_ROW_HEIGHT,
        ) * GridDefaults.DEFAULT_GRID_ROW_HEIGHT;

      const shouldUpdate = shouldUpdateWidgetHeightAutomatically(
        paddedHeight,
        props,
      );
      const { updateWidgetAutoHeight } = context;

      if (updateWidgetAutoHeight) {
        const { widgetId } = props;
        shouldUpdate && updateWidgetAutoHeight(widgetId, paddedHeight);
      }
    };
    return (
      <AutoHeightContainerWrapper
        onUpdateDynamicHeight={(height) => updateAutoHeight(height)}
        widgetProps={props}
      >
        {props.children}
      </AutoHeightContainerWrapper>
    );
  }
  return props.children;
};
