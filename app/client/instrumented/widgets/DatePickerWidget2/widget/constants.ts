function cov_b72cdbojq() {
  var path = "/Users/apple/github/appsmith/app/client/src/widgets/DatePickerWidget2/widget/constants.ts";
  var hash = "6082f715804087839e0acd8ab2cb4adbedc9ed67";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/apple/github/appsmith/app/client/src/widgets/DatePickerWidget2/widget/constants.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 33
        },
        end: {
          line: 88,
          column: 3
        }
      },
      "1": {
        start: {
          line: 85,
          column: 14
        },
        end: {
          line: 88,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 85,
            column: 6
          },
          end: {
            line: 85,
            column: 7
          }
        },
        loc: {
          start: {
            line: 85,
            column: 14
          },
          end: {
            line: 88,
            column: 1
          }
        },
        line: 85
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6082f715804087839e0acd8ab2cb4adbedc9ed67"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_b72cdbojq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_b72cdbojq();
import { SubTextPosition } from "components/constants";
import moment from "moment";
export const DateFormatOptions = (cov_b72cdbojq().s[0]++, [{
  label: moment().format("YYYY-MM-DDTHH:mm:ss.sssZ"),
  subText: "ISO 8601",
  value: "YYYY-MM-DDTHH:mm:ss.sssZ"
}, {
  label: moment().format("LLL"),
  subText: "LLL",
  value: "LLL"
}, {
  label: moment().format("LL"),
  subText: "LL",
  value: "LL"
}, {
  label: moment().format("YYYY-MM-DD HH:mm"),
  subText: "YYYY-MM-DD HH:mm",
  value: "YYYY-MM-DD HH:mm"
}, {
  label: moment().format("YYYY-MM-DDTHH:mm:ss"),
  subText: "YYYY-MM-DDTHH:mm:ss",
  value: "YYYY-MM-DDTHH:mm:ss"
}, {
  label: moment().format("YYYY-MM-DD hh:mm:ss A"),
  subText: "YYYY-MM-DD hh:mm:ss A",
  value: "YYYY-MM-DD hh:mm:ss A"
}, {
  label: moment().format("DD/MM/YYYY HH:mm"),
  subText: "DD/MM/YYYY HH:mm",
  value: "DD/MM/YYYY HH:mm"
}, {
  label: moment().format("D MMMM, YYYY"),
  subText: "D MMMM, YYYY",
  value: "D MMMM, YYYY"
}, {
  label: moment().format("H:mm A D MMMM, YYYY"),
  subText: "H:mm A D MMMM, YYYY",
  value: "H:mm A D MMMM, YYYY"
}, {
  label: moment().format("YYYY-MM-DD"),
  subText: "YYYY-MM-DD",
  value: "YYYY-MM-DD"
}, {
  label: moment().format("MM-DD-YYYY"),
  subText: "MM-DD-YYYY",
  value: "MM-DD-YYYY"
}, {
  label: moment().format("DD-MM-YYYY"),
  subText: "DD-MM-YYYY",
  value: "DD-MM-YYYY"
}, {
  label: moment().format("MM/DD/YYYY"),
  subText: "MM/DD/YYYY",
  value: "MM/DD/YYYY"
}, {
  label: moment().format("DD/MM/YYYY"),
  subText: "DD/MM/YYYY",
  value: "DD/MM/YYYY"
}, {
  label: moment().format("DD/MM/YY"),
  subText: "DD/MM/YY",
  value: "DD/MM/YY"
}, {
  label: moment().format("MM/DD/YY"),
  subText: "MM/DD/YY",
  value: "MM/DD/YY"
}].map(x => {
  cov_b72cdbojq().f[0]++;
  cov_b72cdbojq().s[1]++;
  return {
    ...x,
    subTextPosition: SubTextPosition.BOTTOM
  };
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfYjcyY2Rib2pxIiwiYWN0dWFsQ292ZXJhZ2UiLCJTdWJUZXh0UG9zaXRpb24iLCJtb21lbnQiLCJEYXRlRm9ybWF0T3B0aW9ucyIsInMiLCJsYWJlbCIsImZvcm1hdCIsInN1YlRleHQiLCJ2YWx1ZSIsIm1hcCIsIngiLCJmIiwic3ViVGV4dFBvc2l0aW9uIiwiQk9UVE9NIl0sInNvdXJjZXMiOlsiY29uc3RhbnRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YlRleHRQb3NpdGlvbiB9IGZyb20gXCJjb21wb25lbnRzL2NvbnN0YW50c1wiO1xuaW1wb3J0IG1vbWVudCBmcm9tIFwibW9tZW50XCI7XG5cbmV4cG9ydCBjb25zdCBEYXRlRm9ybWF0T3B0aW9ucyA9IFtcbiAge1xuICAgIGxhYmVsOiBtb21lbnQoKS5mb3JtYXQoXCJZWVlZLU1NLUREVEhIOm1tOnNzLnNzc1pcIiksXG4gICAgc3ViVGV4dDogXCJJU08gODYwMVwiLFxuICAgIHZhbHVlOiBcIllZWVktTU0tRERUSEg6bW06c3Muc3NzWlwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIkxMTFwiKSxcbiAgICBzdWJUZXh0OiBcIkxMTFwiLFxuICAgIHZhbHVlOiBcIkxMTFwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIkxMXCIpLFxuICAgIHN1YlRleHQ6IFwiTExcIixcbiAgICB2YWx1ZTogXCJMTFwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIllZWVktTU0tREQgSEg6bW1cIiksXG4gICAgc3ViVGV4dDogXCJZWVlZLU1NLUREIEhIOm1tXCIsXG4gICAgdmFsdWU6IFwiWVlZWS1NTS1ERCBISDptbVwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIllZWVktTU0tRERUSEg6bW06c3NcIiksXG4gICAgc3ViVGV4dDogXCJZWVlZLU1NLUREVEhIOm1tOnNzXCIsXG4gICAgdmFsdWU6IFwiWVlZWS1NTS1ERFRISDptbTpzc1wiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIllZWVktTU0tREQgaGg6bW06c3MgQVwiKSxcbiAgICBzdWJUZXh0OiBcIllZWVktTU0tREQgaGg6bW06c3MgQVwiLFxuICAgIHZhbHVlOiBcIllZWVktTU0tREQgaGg6bW06c3MgQVwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIkREL01NL1lZWVkgSEg6bW1cIiksXG4gICAgc3ViVGV4dDogXCJERC9NTS9ZWVlZIEhIOm1tXCIsXG4gICAgdmFsdWU6IFwiREQvTU0vWVlZWSBISDptbVwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIkQgTU1NTSwgWVlZWVwiKSxcbiAgICBzdWJUZXh0OiBcIkQgTU1NTSwgWVlZWVwiLFxuICAgIHZhbHVlOiBcIkQgTU1NTSwgWVlZWVwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIkg6bW0gQSBEIE1NTU0sIFlZWVlcIiksXG4gICAgc3ViVGV4dDogXCJIOm1tIEEgRCBNTU1NLCBZWVlZXCIsXG4gICAgdmFsdWU6IFwiSDptbSBBIEQgTU1NTSwgWVlZWVwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIllZWVktTU0tRERcIiksXG4gICAgc3ViVGV4dDogXCJZWVlZLU1NLUREXCIsXG4gICAgdmFsdWU6IFwiWVlZWS1NTS1ERFwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIk1NLURELVlZWVlcIiksXG4gICAgc3ViVGV4dDogXCJNTS1ERC1ZWVlZXCIsXG4gICAgdmFsdWU6IFwiTU0tREQtWVlZWVwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIkRELU1NLVlZWVlcIiksXG4gICAgc3ViVGV4dDogXCJERC1NTS1ZWVlZXCIsXG4gICAgdmFsdWU6IFwiREQtTU0tWVlZWVwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIk1NL0REL1lZWVlcIiksXG4gICAgc3ViVGV4dDogXCJNTS9ERC9ZWVlZXCIsXG4gICAgdmFsdWU6IFwiTU0vREQvWVlZWVwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIkREL01NL1lZWVlcIiksXG4gICAgc3ViVGV4dDogXCJERC9NTS9ZWVlZXCIsXG4gICAgdmFsdWU6IFwiREQvTU0vWVlZWVwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIkREL01NL1lZXCIpLFxuICAgIHN1YlRleHQ6IFwiREQvTU0vWVlcIixcbiAgICB2YWx1ZTogXCJERC9NTS9ZWVwiLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IG1vbWVudCgpLmZvcm1hdChcIk1NL0REL1lZXCIpLFxuICAgIHN1YlRleHQ6IFwiTU0vREQvWVlcIixcbiAgICB2YWx1ZTogXCJNTS9ERC9ZWVwiLFxuICB9LFxuXS5tYXAoKHgpID0+ICh7XG4gIC4uLngsXG4gIHN1YlRleHRQb3NpdGlvbjogU3ViVGV4dFBvc2l0aW9uLkJPVFRPTSxcbn0pKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGFBQUE7QUFmWixTQUFTRSxlQUFlLFFBQVEsc0JBQXNCO0FBQ3RELE9BQU9DLE1BQU0sTUFBTSxRQUFRO0FBRTNCLE9BQU8sTUFBTUMsaUJBQWlCLElBQUFKLGFBQUEsR0FBQUssQ0FBQSxPQUFHLENBQy9CO0VBQ0VDLEtBQUssRUFBRUgsTUFBTSxDQUFDLENBQUMsQ0FBQ0ksTUFBTSxDQUFDLDBCQUEwQixDQUFD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