function cov_2bkc5qrzzy() {
  var path = "/Users/apple/github/appsmith/app/client/src/pages/Editor/Explorer/mockTestData.ts";
  var hash = "375eb6c8503ab6fb31005c26ea09366c898aa941";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/apple/github/appsmith/app/client/src/pages/Editor/Explorer/mockTestData.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 31
        },
        end: {
          line: 191,
          column: 1
        }
      },
      "1": {
        start: {
          line: 193,
          column: 28
        },
        end: {
          line: 259,
          column: 1
        }
      },
      "2": {
        start: {
          line: 261,
          column: 29
        },
        end: {
          line: 383,
          column: 1
        }
      },
      "3": {
        start: {
          line: 385,
          column: 41
        },
        end: {
          line: 414,
          column: 1
        }
      },
      "4": {
        start: {
          line: 385,
          column: 47
        },
        end: {
          line: 414,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 385,
            column: 41
          },
          end: {
            line: 385,
            column: 42
          }
        },
        loc: {
          start: {
            line: 385,
            column: 47
          },
          end: {
            line: 414,
            column: 1
          }
        },
        line: 385
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "375eb6c8503ab6fb31005c26ea09366c898aa941"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2bkc5qrzzy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2bkc5qrzzy();
export const mockDatasources = (cov_2bkc5qrzzy().s[0]++, [{
  id: "61e0f447cd5225210fa81dd8",
  name: "09bd6b2f",
  pluginId: "5c9f512f96c1a50004819786",
  workspaceId: "607d2c9c1a5f642a171ebd9b",
  datasourceConfiguration: {
    connection: {
      mode: "READ_WRITE",
      ssl: {
        authType: "DEFAULT"
      }
    },
    endpoints: [{
      host: "localhost",
      port: 5432
    }],
    authentication: {
      authenticationType: "dbAuth",
      username: "postgres",
      databaseName: "fakeapi"
    },
    sshProxyEnabled: false
  },
  invalids: [],
  messages: ["You may not be able to access your localhost if Appsmith is running inside a docker container or on the cloud. To enable access to your localhost you may use ngrok to expose your local endpoint to the internet. Please check out Appsmith's documentation to understand more."],
  isConfigured: false,
  isValid: true,
  new: false
}, {
  id: "61e0e47bcd5225210fa81d59",
  name: "2dcc265f",
  pluginId: "5c9f512f96c1a50004819786",
  workspaceId: "607d2c9c1a5f642a171ebd9b",
  datasourceConfiguration: {
    connection: {
      mode: "READ_WRITE",
      ssl: {
        authType: "DEFAULT"
      }
    },
    endpoints: [{
      host: "localhost",
      port: 5432
    }],
    authentication: {
      authenticationType: "dbAuth",
      username: "postgres",
      databaseName: "fakeapi"
    },
    sshProxyEnabled: false
  }
}, {
  id: "61e0f171cd5225210fa81dad",
  name: "f688c404",
  pluginId: "5c9f512f96c1a50004819786",
  workspaceId: "607d2c9c1a5f642a171ebd9b",
  datasourceConfiguration: {
    connection: {
      mode: "READ_WRITE",
      ssl: {
        authType: "DEFAULT"
      }
    },
    endpoints: [{
      host: "localhost",
      port: 5432
    }],
    authentication: {
      authenticationType: "dbAuth",
      username: "postgres",
      databaseName: "fakeapi"
    },
    sshProxyEnabled: false
  }
}, {
  id: "61e0e47bcd5225210fa81d59",
  name: "2dcc265f",
  pluginId: "5c9f512f96c1a50004819786",
  workspaceId: "607d2c9c1a5f642a171ebd9b",
  datasourceConfiguration: {
    connection: {
      mode: "READ_WRITE",
      ssl: {
        authType: "DEFAULT"
      }
    },
    endpoints: [{
      host: "localhost",
      port: 5432
    }],
    authentication: {
      authenticationType: "dbAuth",
      username: "postgres",
      databaseName: "fakeapi"
    },
    sshProxyEnabled: false
  }
}, {
  id: "61e0f171cd5225210fa81dad",
  name: "f688c404",
  pluginId: "5c9f512f96c1a50004819786",
  workspaceId: "607d2c9c1a5f642a171ebd9b",
  datasourceConfiguration: {
    connection: {
      mode: "READ_WRITE",
      ssl: {
        authType: "DEFAULT"
      }
    },
    endpoints: [{
      host: "localhost",
      port: 5432
    }],
    authentication: {
      authenticationType: "dbAuth",
      username: "postgres",
      databaseName: "fakeapi"
    },
    sshProxyEnabled: false
  }
}, {
  id: "61e0e47bcd5225210fa81d59",
  name: "qwerty12",
  pluginId: "5c9f512f96c1a50004819786",
  workspaceId: "607d2c9c1a5f642a171ebd9b",
  datasourceConfiguration: {
    connection: {
      mode: "READ_WRITE",
      ssl: {
        authType: "DEFAULT"
      }
    },
    endpoints: [{
      host: "localhost",
      port: 5432
    }],
    authentication: {
      authenticationType: "dbAuth",
      username: "postgres",
      databaseName: "fakeapi"
    },
    sshProxyEnabled: false
  }
}, {
  id: "61e0f171cd5225210f121dad",
  name: "poiuyt09",
  pluginId: "5c9f512f96c1a50004819786",
  workspaceId: "607d2c9c1a5f642a171ebd9b",
  datasourceConfiguration: {
    connection: {
      mode: "READ_WRITE",
      ssl: {
        authType: "DEFAULT"
      }
    },
    endpoints: [{
      host: "localhost",
      port: 5432
    }],
    authentication: {
      authenticationType: "dbAuth",
      username: "postgres",
      databaseName: "fakeapi"
    },
    sshProxyEnabled: false
  }
}]);
export const mockApiDatas = (cov_2bkc5qrzzy().s[1]++, [{
  id: "634929568f35a90ce8a428dc",
  workspaceId: "607d2c9c1a5f642a171ebd9b",
  pluginType: "API",
  pluginId: "5c9f512f96c1a50004819786",
  name: "Api1",
  datasource: {
    userPermissions: [],
    name: "poiuyt09",
    pluginId: "5c9f512f96c1a50004819786",
    workspaceId: "607d2c9c1a5f642a171ebd9b",
    datasourceConfiguration: {
      connection: {
        mode: "READ_WRITE",
        ssl: {
          authType: "DEFAULT"
        }
      },
      endpoints: [{
        host: "localhost",
        port: 5432
      }],
      authentication: {
        authenticationType: "dbAuth",
        username: "postgres",
        databaseName: "fakeapi"
      },
      sshProxyEnabled: false
    }
  },
  actionConfiguration: {
    timeoutInMillisecond: 10000,
    paginationType: "NONE",
    headers: [],
    encodeParamsToggle: true,
    queryParameters: [],
    bodyFormData: [],
    httpMethod: "GET",
    selfReferencingDataPaths: [],
    pluginSpecifiedTemplates: [{
      value: true
    }],
    formData: {
      apiContentType: "none"
    }
  },
  executeOnLoad: false,
  dynamicBindingPathList: [],
  isValid: true,
  invalids: [],
  messages: [],
  jsonPathKeys: [],
  confirmBeforeExecute: false,
  userPermissions: ["read:actions", "delete:actions", "execute:actions", "manage:actions"],
  validName: "Api1"
}]);
export const mockJsActions = (cov_2bkc5qrzzy().s[2]++, [{
  id: "634926dc8f35a90ce8a428d2",
  workspaceId: "607d2c9c1a5f642a171ebd9b",
  name: "JSObject1",
  pluginId: "634925cd8f35a90ce8a42841",
  pluginType: "JS",
  actionIds: [],
  archivedActionIds: [],
  actions: [{
    id: "634926dc8f35a90ce8a428d0",
    workspaceId: "607d2c9c1a5f642a171ebd9b",
    pluginType: "JS",
    pluginId: "634925cd8f35a90ce8a42841",
    name: "myFun1",
    fullyQualifiedName: "JSObject1.myFun1",
    datasource: {
      userPermissions: [],
      name: "UNUSED_DATASOURCE",
      pluginId: "634925cd8f35a90ce8a42841",
      workspaceId: "607d2c9c1a5f642a171ebd9b",
      messages: [],
      isValid: true,
      new: true
    },
    collectionId: "634926dc8f35a90ce8a428d2",
    actionConfiguration: {
      timeoutInMillisecond: 10000,
      paginationType: "NONE",
      encodeParamsToggle: true,
      body: "() => {}",
      selfReferencingDataPaths: [],
      jsArguments: [],
      isAsync: false
    },
    executeOnLoad: false,
    clientSideExecution: true,
    dynamicBindingPathList: [{
      key: "body"
    }],
    isValid: true,
    invalids: [],
    messages: [],
    jsonPathKeys: ["() => {}"],
    confirmBeforeExecute: false,
    userPermissions: ["read:actions", "delete:actions", "execute:actions", "manage:actions"],
    validName: "JSObject1.myFun1"
  }, {
    id: "634926dc8f35a90ce8a428cf",
    workspaceId: "607d2c9c1a5f642a171ebd9b",
    pluginType: "JS",
    pluginId: "634925cd8f35a90ce8a42841",
    name: "myFun2",
    fullyQualifiedName: "JSObject1.myFun2",
    datasource: {
      userPermissions: [],
      name: "UNUSED_DATASOURCE",
      pluginId: "634925cd8f35a90ce8a42841",
      workspaceId: "607d2c9c1a5f642a171ebd9b",
      messages: [],
      isValid: true,
      new: true
    },
    collectionId: "634926dc8f35a90ce8a428d2",
    actionConfiguration: {
      timeoutInMillisecond: 10000,
      paginationType: "NONE",
      encodeParamsToggle: true,
      body: "async () => {}",
      selfReferencingDataPaths: [],
      jsArguments: [],
      isAsync: true
    },
    executeOnLoad: false,
    clientSideExecution: true,
    dynamicBindingPathList: [{
      key: "body"
    }],
    isValid: true,
    invalids: [],
    messages: [],
    jsonPathKeys: ["async () => {}"],
    confirmBeforeExecute: false,
    userPermissions: ["read:actions", "delete:actions", "execute:actions", "manage:actions"],
    validName: "JSObject1.myFun2"
  }],
  archivedActions: [],
  body: "export default {sad\n\tmyVar1: [],\n\tmyVar2: {},\n\tmyFun1: () => {\n\t\t//write code here\n\t},\n\tmyFun2: async () => {\n\t\t//use async-await or promises\n\t}\n}",
  variables: [{
    name: "myVar1",
    value: "[]"
  }, {
    name: "myVar2",
    value: "{}"
  }],
  userPermissions: ["read:actions", "delete:actions", "execute:actions", "manage:actions"]
}]);
cov_2bkc5qrzzy().s[3]++;
export const mockEntitiesFilesSelector = () => {
  cov_2bkc5qrzzy().f[0]++;
  cov_2bkc5qrzzy().s[4]++;
  return [{
    type: "group",
    entity: {
      name: "APIs"
    }
  }, {
    type: "API",
    entity: {
      id: "634929568f35a90ce8a428dc",
      name: "Api1"
    },
    group: "APIs"
  }, {
    type: "group",
    entity: {
      name: "JS Objects"
    }
  }, {
    type: "JS",
    entity: {
      id: "634926dc8f35a90ce8a428d2",
      name: "JSObject1"
    },
    group: "JS Objects"
  }];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,